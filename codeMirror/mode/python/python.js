(function(A){if(typeof exports=="object"&&typeof module=="object"){A(require("../../lib/codemirror"))}else{if(typeof define=="function"&&define.amd){define(["../../lib/codemirror"],A)}else{A(CodeMirror)}}})(function(F){function C(J){return new RegExp("^(("+J.join(")|(")+"))\\b")}var A=C(["and","or","not","is"]);var E=["as","assert","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","lambda","pass","raise","return","try","while","with","yield","in"];var D=["abs","all","any","bin","bool","bytearray","callable","chr","classmethod","compile","complex","delattr","dict","dir","divmod","enumerate","eval","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","isinstance","issubclass","iter","len","list","locals","map","max","memoryview","min","next","object","oct","open","ord","pow","property","range","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","vars","zip","__import__","NotImplemented","Ellipsis","__debug__"];var G={builtins:["apply","basestring","buffer","cmp","coerce","execfile","file","intern","long","raw_input","reduce","reload","unichr","unicode","xrange","False","True","None"],keywords:["exec","print"]};var H={builtins:["ascii","bytes","exec","print"],keywords:["nonlocal","False","True","None","async","await"]};F.registerHelper("hintWords","python",E.concat(D));function B(J){return J.scopes[J.scopes.length-1]}F.defineMode("python",function(a,U){var d="error";var M=U.singleDelimiters||new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]");var L=U.doubleOperators||new RegExp("^((==)|(!=)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");var J=U.doubleDelimiters||new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");var V=U.tripleDelimiters||new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");if(U.version&&parseInt(U.version,10)==3){var b=U.singleOperators||new RegExp("^[\\+\\-\\*/%&|\\^~<>!@]");var c=U.identifiers||new RegExp("^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*")}else{var b=U.singleOperators||new RegExp("^[\\+\\-\\*/%&|\\^~<>!]");var c=U.identifiers||new RegExp("^[_A-Za-z][_A-Za-z0-9]*")}var O=U.hangingIndent||a.indentUnit;var T=E,R=D;if(U.extra_keywords!=undefined){T=T.concat(U.extra_keywords)}if(U.extra_builtins!=undefined){R=R.concat(U.extra_builtins)}if(U.version&&parseInt(U.version,10)==3){T=T.concat(H.keywords);R=R.concat(H.builtins);var Q=new RegExp("^(([rb]|(br))?('{3}|\"{3}|['\"]))","i")}else{T=T.concat(G.keywords);R=R.concat(G.builtins);var Q=new RegExp("^(([rub]|(ur)|(br))?('{3}|\"{3}|['\"]))","i")}var K=C(T);var S=C(R);function P(j,h){if(j.sol()&&B(h).type=="py"){var f=B(h).offset;if(j.eatSpace()){var i=j.indentation();if(i>f){W(j,h,"py")}else{if(i<f&&Z(j,h)){h.errorToken=true}}return null}else{var g=X(j,h);if(f>0&&Z(j,h)){g+=" "+d}return g}}return X(j,h)}function X(j,i){if(j.eatSpace()){return null}var h=j.peek();if(h=="#"){j.skipToEnd();return"comment"}if(j.match(/^[0-9\.]/,false)){var f=false;if(j.match(/^\d*\.\d+(e[\+\-]?\d+)?/i)){f=true}if(j.match(/^\d+\.\d*/)){f=true}if(j.match(/^\.\d+/)){f=true}if(f){j.eat(/J/i);return"number"}var g=false;if(j.match(/^0x[0-9a-f]+/i)){g=true}if(j.match(/^0b[01]+/i)){g=true}if(j.match(/^0o[0-7]+/i)){g=true}if(j.match(/^[1-9]\d*(e[\+\-]?\d+)?/)){j.eat(/J/i);g=true}if(j.match(/^0(?![\dx])/i)){g=true}if(g){j.eat(/L/i);return"number"}}if(j.match(Q)){i.tokenize=e(j.current());return i.tokenize(j,i)}if(j.match(V)||j.match(J)){return null}if(j.match(L)||j.match(b)){return"operator"}if(j.match(M)){return null}if(j.match(K)||j.match(A)){return"keyword"}if(j.match(S)){return"builtin"}if(j.match(/^(self|cls)\b/)){return"variable-2"}if(j.match(c)){if(i.lastToken=="def"||i.lastToken=="class"){return"def"}return"variable"}j.next();return d}function e(i){while("rub".indexOf(i.charAt(0).toLowerCase())>=0){i=i.substr(1)}var f=i.length==1;var g="string";function h(k,j){while(!k.eol()){k.eatWhile(/[^'"\\]/);if(k.eat("\\")){k.next();if(f&&k.eol()){return g}}else{if(k.match(i)){j.tokenize=P;return g}else{k.eat(/['"]/)}}}if(f){if(U.singleLineStringErrors){return d}else{j.tokenize=P}}return g}h.isString=true;return h}function W(j,i,f){var g=0,h=null;if(f=="py"){while(B(i).type!="py"){i.scopes.pop()}}g=B(i).offset+(f=="py"?a.indentUnit:O);if(f!="py"&&!j.match(/^(\s|#.*)*$/,false)){h=j.column()+1}i.scopes.push({offset:g,type:f,align:h})}function Z(h,g){var f=h.indentation();while(B(g).offset>f){if(B(g).type!="py"){return true}g.scopes.pop()}return B(g).offset!=f}function Y(j,h){var f=h.tokenize(j,h);var g=j.current();if(g=="."){f=j.match(c,false)?null:d;if(f==null&&h.lastStyle=="meta"){f="meta"}return f}if(g=="@"){if(U.version&&parseInt(U.version,10)==3){return j.match(c,false)?"meta":"operator"}else{return j.match(c,false)?"meta":d}}if((f=="variable"||f=="builtin")&&h.lastStyle=="meta"){f="meta"}if(g=="pass"||g=="return"){h.dedent+=1}if(g=="lambda"){h.lambda=true}if(g==":"&&!h.lambda&&B(h).type=="py"){W(j,h,"py")}var i=g.length==1?"[({".indexOf(g):-1;if(i!=-1){W(j,h,"])}".slice(i,i+1))}i="])}".indexOf(g);if(i!=-1){if(B(h).type==g){h.scopes.pop()}else{return d}}if(h.dedent>0&&j.eol()&&B(h).type=="py"){if(h.scopes.length>1){h.scopes.pop()}h.dedent-=1}return f}var N={startState:function(f){return{tokenize:P,scopes:[{offset:f||0,type:"py",align:null}],lastStyle:null,lastToken:null,lambda:false,dedent:0}},token:function(j,i){var f=i.errorToken;if(f){i.errorToken=false}var g=Y(j,i);i.lastStyle=g;var h=j.current();if(h&&g){i.lastToken=h}if(j.eol()&&i.lambda){i.lambda=false}return f?g+" "+d:g},indent:function(i,g){if(i.tokenize!=P){return i.tokenize.isString?F.Pass:0}var h=B(i);var f=g&&g.charAt(0)==h.type;if(h.align!=null){return h.align-(f?1:0)}else{if(f&&i.scopes.length>1){return i.scopes[i.scopes.length-2].offset}else{return h.offset}}},closeBrackets:{triples:"'\""},lineComment:"#",fold:"indent"};return N});F.defineMIME("text/x-python","python");var I=function(J){return J.split(" ")};F.defineMIME("text/x-cython",{name:"python",extra_keywords:I("by cdef cimport cpdef ctypedef enum exceptextern gil include nogil property publicreadonly struct union DEF IF ELIF ELSE")})});